#include <stdio.h>
#include <stdlib.h>

#define SIZE 100

// Stack structure
struct Stack {
    int arr[SIZE];
    int top;
};

// Initialize stack
void init(struct Stack* s) {
    s->top = -1;
}

// Check if empty
int isEmpty(struct Stack* s) {
    return s->top == -1;
}

// Push
void push(struct Stack* s, int x) {
    if (s->top == SIZE - 1) {
        printf("Stack Overflow\n");
        return;
    }
    s->arr[++s->top] = x;
}

// Pop
int pop(struct Stack* s) {
    if (isEmpty(s)) {
        return -1;
    }
    return s->arr[s->top--];
}

// Queue using two stacks
struct Queue {
    struct Stack s1, s2;
};

// Initialize queue
void initQueue(struct Queue* q) {
    init(&q->s1);
    init(&q->s2);
}

// Enqueue operation
void enqueue(struct Queue* q, int x) {
    push(&q->s1, x);
    printf("%d enqueued\n", x);
}

// Dequeue operation
int dequeue(struct Queue* q) {
    if (isEmpty(&q->s1) && isEmpty(&q->s2)) {
        printf("Queue Underflow\n");
        return -1;
    }

    // If s2 empty, move elements from s1
    if (isEmpty(&q->s2)) {
        while (!isEmpty(&q->s1)) {
            push(&q->s2, pop(&q->s1));
        }
    }

    return pop(&q->s2);
}

int main() {
    struct Queue q;
    initQueue(&q);

    enqueue(&q, 10);
    enqueue(&q, 20);
    enqueue(&q, 30);

    printf("Dequeued: %d\n", dequeue(&q));
    printf("Dequeued: %d\n", dequeue(&q));

    enqueue(&q, 40);
    printf("Dequeued: %d\n", dequeue(&q));
    printf("Dequeued: %d\n", dequeue(&q));

    return 0;
}
