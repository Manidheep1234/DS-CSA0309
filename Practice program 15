#include <stdio.h>
#include <stdlib.h>

struct Node {
    int key;
    struct Node *left, *right;
};

struct Node* newNode(int key) {
    struct Node* node = (struct Node*)malloc(sizeof(struct Node));
    node->key = key;
    node->left = node->right = NULL;
    return node;
}

struct Node* insert(struct Node* root, int key) {
    if (!root) return newNode(key);
    if (key < root->key) root->left = insert(root->left, key);
    else if (key > root->key) root->right = insert(root->right, key);
    return root;
}

struct Node* search(struct Node* root, int key) {
    if (!root || root->key == key) return root;
    if (key < root->key) return search(root->left, key);
    return search(root->right, key);
}

struct Node* minNode(struct Node* root) {
    while (root && root->left) root = root->left;
    return root;
}

struct Node* maxNode(struct Node* root) {
    while (root && root->right) root = root->right;
    return root;
}

int main() {
    struct Node* root = NULL;
    root = insert(root, 50);
    insert(root, 30);
    insert(root, 70);
    insert(root, 20);
    insert(root, 40);
    insert(root, 60);
    insert(root, 80);

    int key = 40;
    struct Node* found = search(root, key);
    if (found) printf("Element %d found\n", key);
    else printf("Element %d not found\n", key);

    printf("Minimum element: %d\n", minNode(root)->key);
    printf("Maximum element: %d\n", maxNode(root)->key);

    return 0;
}
